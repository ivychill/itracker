// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Trackevent.pb.h"

@implementation TrackeventRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [TrackeventRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL LYOsTypeIsValidValue(LYOsType value) {
  switch (value) {
    case LYOsTypeLyAndroid:
    case LYOsTypeLyIos:
    case LYOsTypeLyWp:
      return YES;
    default:
      return NO;
  }
}
@interface TrackEvent ()
@property TrackEvent_EventType type;
@property int32_t id;
@property (retain) NSString* tracker;
@property (retain) NSString* trackerX;
@property (retain) NSString* trackerY;
@property (retain) NSString* trackee;
@property (retain) NSString* trackeeX;
@property (retain) NSString* trackeeY;
@property (retain) NSString* trackeeDesc;
@property (retain) LYCheckin* checkin;
@property (retain) NSString* sndId;
@end

@implementation TrackEvent

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasTracker {
  return !!hasTracker_;
}
- (void) setHasTracker:(BOOL) value {
  hasTracker_ = !!value;
}
@synthesize tracker;
- (BOOL) hasTrackerX {
  return !!hasTrackerX_;
}
- (void) setHasTrackerX:(BOOL) value {
  hasTrackerX_ = !!value;
}
@synthesize trackerX;
- (BOOL) hasTrackerY {
  return !!hasTrackerY_;
}
- (void) setHasTrackerY:(BOOL) value {
  hasTrackerY_ = !!value;
}
@synthesize trackerY;
- (BOOL) hasTrackee {
  return !!hasTrackee_;
}
- (void) setHasTrackee:(BOOL) value {
  hasTrackee_ = !!value;
}
@synthesize trackee;
- (BOOL) hasTrackeeX {
  return !!hasTrackeeX_;
}
- (void) setHasTrackeeX:(BOOL) value {
  hasTrackeeX_ = !!value;
}
@synthesize trackeeX;
- (BOOL) hasTrackeeY {
  return !!hasTrackeeY_;
}
- (void) setHasTrackeeY:(BOOL) value {
  hasTrackeeY_ = !!value;
}
@synthesize trackeeY;
- (BOOL) hasTrackeeDesc {
  return !!hasTrackeeDesc_;
}
- (void) setHasTrackeeDesc:(BOOL) value {
  hasTrackeeDesc_ = !!value;
}
@synthesize trackeeDesc;
- (BOOL) hasCheckin {
  return !!hasCheckin_;
}
- (void) setHasCheckin:(BOOL) value {
  hasCheckin_ = !!value;
}
@synthesize checkin;
- (BOOL) hasSndId {
  return !!hasSndId_;
}
- (void) setHasSndId:(BOOL) value {
  hasSndId_ = !!value;
}
@synthesize sndId;
- (void) dealloc {
  self.tracker = nil;
  self.trackerX = nil;
  self.trackerY = nil;
  self.trackee = nil;
  self.trackeeX = nil;
  self.trackeeY = nil;
  self.trackeeDesc = nil;
  self.checkin = nil;
  self.sndId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.type = TrackEvent_EventTypeStartTrackingReq;
    self.id = 0;
    self.tracker = @"";
    self.trackerX = @"";
    self.trackerY = @"";
    self.trackee = @"";
    self.trackeeX = @"";
    self.trackeeY = @"";
    self.trackeeDesc = @"";
    self.checkin = [LYCheckin defaultInstance];
    self.sndId = @"";
  }
  return self;
}
static TrackEvent* defaultTrackEventInstance = nil;
+ (void) initialize {
  if (self == [TrackEvent class]) {
    defaultTrackEventInstance = [[TrackEvent alloc] init];
  }
}
+ (TrackEvent*) defaultInstance {
  return defaultTrackEventInstance;
}
- (TrackEvent*) defaultInstance {
  return defaultTrackEventInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasSndId) {
    return NO;
  }
  if (self.hasCheckin) {
    if (!self.checkin.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasId) {
    [output writeInt32:2 value:self.id];
  }
  if (self.hasTracker) {
    [output writeString:3 value:self.tracker];
  }
  if (self.hasTrackerX) {
    [output writeString:4 value:self.trackerX];
  }
  if (self.hasTrackerY) {
    [output writeString:5 value:self.trackerY];
  }
  if (self.hasTrackee) {
    [output writeString:6 value:self.trackee];
  }
  if (self.hasTrackeeX) {
    [output writeString:7 value:self.trackeeX];
  }
  if (self.hasTrackeeY) {
    [output writeString:8 value:self.trackeeY];
  }
  if (self.hasTrackeeDesc) {
    [output writeString:9 value:self.trackeeDesc];
  }
  if (self.hasCheckin) {
    [output writeMessage:10 value:self.checkin];
  }
  if (self.hasSndId) {
    [output writeString:11 value:self.sndId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasType) {
    size += computeEnumSize(1, self.type);
  }
  if (self.hasId) {
    size += computeInt32Size(2, self.id);
  }
  if (self.hasTracker) {
    size += computeStringSize(3, self.tracker);
  }
  if (self.hasTrackerX) {
    size += computeStringSize(4, self.trackerX);
  }
  if (self.hasTrackerY) {
    size += computeStringSize(5, self.trackerY);
  }
  if (self.hasTrackee) {
    size += computeStringSize(6, self.trackee);
  }
  if (self.hasTrackeeX) {
    size += computeStringSize(7, self.trackeeX);
  }
  if (self.hasTrackeeY) {
    size += computeStringSize(8, self.trackeeY);
  }
  if (self.hasTrackeeDesc) {
    size += computeStringSize(9, self.trackeeDesc);
  }
  if (self.hasCheckin) {
    size += computeMessageSize(10, self.checkin);
  }
  if (self.hasSndId) {
    size += computeStringSize(11, self.sndId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (TrackEvent*) parseFromData:(NSData*) data {
  return (TrackEvent*)[[[TrackEvent builder] mergeFromData:data] build];
}
+ (TrackEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TrackEvent*)[[[TrackEvent builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TrackEvent*) parseFromInputStream:(NSInputStream*) input {
  return (TrackEvent*)[[[TrackEvent builder] mergeFromInputStream:input] build];
}
+ (TrackEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TrackEvent*)[[[TrackEvent builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TrackEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TrackEvent*)[[[TrackEvent builder] mergeFromCodedInputStream:input] build];
}
+ (TrackEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TrackEvent*)[[[TrackEvent builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TrackEvent_Builder*) builder {
  return [[[TrackEvent_Builder alloc] init] autorelease];
}
+ (TrackEvent_Builder*) builderWithPrototype:(TrackEvent*) prototype {
  return [[TrackEvent builder] mergeFrom:prototype];
}
- (TrackEvent_Builder*) builder {
  return [TrackEvent builder];
}
@end

BOOL TrackEvent_EventTypeIsValidValue(TrackEvent_EventType value) {
  switch (value) {
    case TrackEvent_EventTypeLyCheckIn:
    case TrackEvent_EventTypeStartTrackingReq:
    case TrackEvent_EventTypeStartTrackingRep:
    case TrackEvent_EventTypeSendLocReq:
    case TrackEvent_EventTypeSendLocRep:
    case TrackEvent_EventTypeQueryByIdReq:
    case TrackEvent_EventTypeQueryByIdRep:
    case TrackEvent_EventTypeFwdLocReq:
    case TrackEvent_EventTypeFwdLocRep:
      return YES;
    default:
      return NO;
  }
}
@interface TrackEvent_Builder()
@property (retain) TrackEvent* result;
@end

@implementation TrackEvent_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[TrackEvent alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TrackEvent_Builder*) clear {
  self.result = [[[TrackEvent alloc] init] autorelease];
  return self;
}
- (TrackEvent_Builder*) clone {
  return [TrackEvent builderWithPrototype:result];
}
- (TrackEvent*) defaultInstance {
  return [TrackEvent defaultInstance];
}
- (TrackEvent*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TrackEvent*) buildPartial {
  TrackEvent* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (TrackEvent_Builder*) mergeFrom:(TrackEvent*) other {
  if (other == [TrackEvent defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasTracker) {
    [self setTracker:other.tracker];
  }
  if (other.hasTrackerX) {
    [self setTrackerX:other.trackerX];
  }
  if (other.hasTrackerY) {
    [self setTrackerY:other.trackerY];
  }
  if (other.hasTrackee) {
    [self setTrackee:other.trackee];
  }
  if (other.hasTrackeeX) {
    [self setTrackeeX:other.trackeeX];
  }
  if (other.hasTrackeeY) {
    [self setTrackeeY:other.trackeeY];
  }
  if (other.hasTrackeeDesc) {
    [self setTrackeeDesc:other.trackeeDesc];
  }
  if (other.hasCheckin) {
    [self mergeCheckin:other.checkin];
  }
  if (other.hasSndId) {
    [self setSndId:other.sndId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TrackEvent_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TrackEvent_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (TrackEvent_EventTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        [self setId:[input readInt32]];
        break;
      }
      case 26: {
        [self setTracker:[input readString]];
        break;
      }
      case 34: {
        [self setTrackerX:[input readString]];
        break;
      }
      case 42: {
        [self setTrackerY:[input readString]];
        break;
      }
      case 50: {
        [self setTrackee:[input readString]];
        break;
      }
      case 58: {
        [self setTrackeeX:[input readString]];
        break;
      }
      case 66: {
        [self setTrackeeY:[input readString]];
        break;
      }
      case 74: {
        [self setTrackeeDesc:[input readString]];
        break;
      }
      case 82: {
        LYCheckin_Builder* subBuilder = [LYCheckin builder];
        if (self.hasCheckin) {
          [subBuilder mergeFrom:self.checkin];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCheckin:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        [self setSndId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (TrackEvent_EventType) type {
  return result.type;
}
- (TrackEvent_Builder*) setType:(TrackEvent_EventType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (TrackEvent_Builder*) clearType {
  result.hasType = NO;
  result.type = TrackEvent_EventTypeStartTrackingReq;
  return self;
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (TrackEvent_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (TrackEvent_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasTracker {
  return result.hasTracker;
}
- (NSString*) tracker {
  return result.tracker;
}
- (TrackEvent_Builder*) setTracker:(NSString*) value {
  result.hasTracker = YES;
  result.tracker = value;
  return self;
}
- (TrackEvent_Builder*) clearTracker {
  result.hasTracker = NO;
  result.tracker = @"";
  return self;
}
- (BOOL) hasTrackerX {
  return result.hasTrackerX;
}
- (NSString*) trackerX {
  return result.trackerX;
}
- (TrackEvent_Builder*) setTrackerX:(NSString*) value {
  result.hasTrackerX = YES;
  result.trackerX = value;
  return self;
}
- (TrackEvent_Builder*) clearTrackerX {
  result.hasTrackerX = NO;
  result.trackerX = @"";
  return self;
}
- (BOOL) hasTrackerY {
  return result.hasTrackerY;
}
- (NSString*) trackerY {
  return result.trackerY;
}
- (TrackEvent_Builder*) setTrackerY:(NSString*) value {
  result.hasTrackerY = YES;
  result.trackerY = value;
  return self;
}
- (TrackEvent_Builder*) clearTrackerY {
  result.hasTrackerY = NO;
  result.trackerY = @"";
  return self;
}
- (BOOL) hasTrackee {
  return result.hasTrackee;
}
- (NSString*) trackee {
  return result.trackee;
}
- (TrackEvent_Builder*) setTrackee:(NSString*) value {
  result.hasTrackee = YES;
  result.trackee = value;
  return self;
}
- (TrackEvent_Builder*) clearTrackee {
  result.hasTrackee = NO;
  result.trackee = @"";
  return self;
}
- (BOOL) hasTrackeeX {
  return result.hasTrackeeX;
}
- (NSString*) trackeeX {
  return result.trackeeX;
}
- (TrackEvent_Builder*) setTrackeeX:(NSString*) value {
  result.hasTrackeeX = YES;
  result.trackeeX = value;
  return self;
}
- (TrackEvent_Builder*) clearTrackeeX {
  result.hasTrackeeX = NO;
  result.trackeeX = @"";
  return self;
}
- (BOOL) hasTrackeeY {
  return result.hasTrackeeY;
}
- (NSString*) trackeeY {
  return result.trackeeY;
}
- (TrackEvent_Builder*) setTrackeeY:(NSString*) value {
  result.hasTrackeeY = YES;
  result.trackeeY = value;
  return self;
}
- (TrackEvent_Builder*) clearTrackeeY {
  result.hasTrackeeY = NO;
  result.trackeeY = @"";
  return self;
}
- (BOOL) hasTrackeeDesc {
  return result.hasTrackeeDesc;
}
- (NSString*) trackeeDesc {
  return result.trackeeDesc;
}
- (TrackEvent_Builder*) setTrackeeDesc:(NSString*) value {
  result.hasTrackeeDesc = YES;
  result.trackeeDesc = value;
  return self;
}
- (TrackEvent_Builder*) clearTrackeeDesc {
  result.hasTrackeeDesc = NO;
  result.trackeeDesc = @"";
  return self;
}
- (BOOL) hasCheckin {
  return result.hasCheckin;
}
- (LYCheckin*) checkin {
  return result.checkin;
}
- (TrackEvent_Builder*) setCheckin:(LYCheckin*) value {
  result.hasCheckin = YES;
  result.checkin = value;
  return self;
}
- (TrackEvent_Builder*) setCheckinBuilder:(LYCheckin_Builder*) builderForValue {
  return [self setCheckin:[builderForValue build]];
}
- (TrackEvent_Builder*) mergeCheckin:(LYCheckin*) value {
  if (result.hasCheckin &&
      result.checkin != [LYCheckin defaultInstance]) {
    result.checkin =
      [[[LYCheckin builderWithPrototype:result.checkin] mergeFrom:value] buildPartial];
  } else {
    result.checkin = value;
  }
  result.hasCheckin = YES;
  return self;
}
- (TrackEvent_Builder*) clearCheckin {
  result.hasCheckin = NO;
  result.checkin = [LYCheckin defaultInstance];
  return self;
}
- (BOOL) hasSndId {
  return result.hasSndId;
}
- (NSString*) sndId {
  return result.sndId;
}
- (TrackEvent_Builder*) setSndId:(NSString*) value {
  result.hasSndId = YES;
  result.sndId = value;
  return self;
}
- (TrackEvent_Builder*) clearSndId {
  result.hasSndId = NO;
  result.sndId = @"";
  return self;
}
@end

@interface LYCheckin ()
@property (retain) NSString* deviceModel;
@property LYOsType osType;
@property (retain) NSString* osVersion;
@property int32_t lyMajorRelease;
@property int32_t lyMinorRelease;
@property (retain) NSString* downloadUrl;
@property (retain) NSString* desc;
@end

@implementation LYCheckin

- (BOOL) hasDeviceModel {
  return !!hasDeviceModel_;
}
- (void) setHasDeviceModel:(BOOL) value {
  hasDeviceModel_ = !!value;
}
@synthesize deviceModel;
- (BOOL) hasOsType {
  return !!hasOsType_;
}
- (void) setHasOsType:(BOOL) value {
  hasOsType_ = !!value;
}
@synthesize osType;
- (BOOL) hasOsVersion {
  return !!hasOsVersion_;
}
- (void) setHasOsVersion:(BOOL) value {
  hasOsVersion_ = !!value;
}
@synthesize osVersion;
- (BOOL) hasLyMajorRelease {
  return !!hasLyMajorRelease_;
}
- (void) setHasLyMajorRelease:(BOOL) value {
  hasLyMajorRelease_ = !!value;
}
@synthesize lyMajorRelease;
- (BOOL) hasLyMinorRelease {
  return !!hasLyMinorRelease_;
}
- (void) setHasLyMinorRelease:(BOOL) value {
  hasLyMinorRelease_ = !!value;
}
@synthesize lyMinorRelease;
- (BOOL) hasDownloadUrl {
  return !!hasDownloadUrl_;
}
- (void) setHasDownloadUrl:(BOOL) value {
  hasDownloadUrl_ = !!value;
}
@synthesize downloadUrl;
- (BOOL) hasDesc {
  return !!hasDesc_;
}
- (void) setHasDesc:(BOOL) value {
  hasDesc_ = !!value;
}
@synthesize desc;
- (void) dealloc {
  self.deviceModel = nil;
  self.osVersion = nil;
  self.downloadUrl = nil;
  self.desc = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.deviceModel = @"";
    self.osType = LYOsTypeLyAndroid;
    self.osVersion = @"";
    self.lyMajorRelease = 0;
    self.lyMinorRelease = 0;
    self.downloadUrl = @"";
    self.desc = @"";
  }
  return self;
}
static LYCheckin* defaultLYCheckinInstance = nil;
+ (void) initialize {
  if (self == [LYCheckin class]) {
    defaultLYCheckinInstance = [[LYCheckin alloc] init];
  }
}
+ (LYCheckin*) defaultInstance {
  return defaultLYCheckinInstance;
}
- (LYCheckin*) defaultInstance {
  return defaultLYCheckinInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOsType) {
    return NO;
  }
  if (!self.hasLyMajorRelease) {
    return NO;
  }
  if (!self.hasLyMinorRelease) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDeviceModel) {
    [output writeString:1 value:self.deviceModel];
  }
  if (self.hasOsType) {
    [output writeEnum:2 value:self.osType];
  }
  if (self.hasOsVersion) {
    [output writeString:3 value:self.osVersion];
  }
  if (self.hasLyMajorRelease) {
    [output writeInt32:4 value:self.lyMajorRelease];
  }
  if (self.hasLyMinorRelease) {
    [output writeInt32:5 value:self.lyMinorRelease];
  }
  if (self.hasDownloadUrl) {
    [output writeString:6 value:self.downloadUrl];
  }
  if (self.hasDesc) {
    [output writeString:7 value:self.desc];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasDeviceModel) {
    size += computeStringSize(1, self.deviceModel);
  }
  if (self.hasOsType) {
    size += computeEnumSize(2, self.osType);
  }
  if (self.hasOsVersion) {
    size += computeStringSize(3, self.osVersion);
  }
  if (self.hasLyMajorRelease) {
    size += computeInt32Size(4, self.lyMajorRelease);
  }
  if (self.hasLyMinorRelease) {
    size += computeInt32Size(5, self.lyMinorRelease);
  }
  if (self.hasDownloadUrl) {
    size += computeStringSize(6, self.downloadUrl);
  }
  if (self.hasDesc) {
    size += computeStringSize(7, self.desc);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (LYCheckin*) parseFromData:(NSData*) data {
  return (LYCheckin*)[[[LYCheckin builder] mergeFromData:data] build];
}
+ (LYCheckin*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LYCheckin*)[[[LYCheckin builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LYCheckin*) parseFromInputStream:(NSInputStream*) input {
  return (LYCheckin*)[[[LYCheckin builder] mergeFromInputStream:input] build];
}
+ (LYCheckin*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LYCheckin*)[[[LYCheckin builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LYCheckin*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LYCheckin*)[[[LYCheckin builder] mergeFromCodedInputStream:input] build];
}
+ (LYCheckin*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LYCheckin*)[[[LYCheckin builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LYCheckin_Builder*) builder {
  return [[[LYCheckin_Builder alloc] init] autorelease];
}
+ (LYCheckin_Builder*) builderWithPrototype:(LYCheckin*) prototype {
  return [[LYCheckin builder] mergeFrom:prototype];
}
- (LYCheckin_Builder*) builder {
  return [LYCheckin builder];
}
@end

@interface LYCheckin_Builder()
@property (retain) LYCheckin* result;
@end

@implementation LYCheckin_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[LYCheckin alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (LYCheckin_Builder*) clear {
  self.result = [[[LYCheckin alloc] init] autorelease];
  return self;
}
- (LYCheckin_Builder*) clone {
  return [LYCheckin builderWithPrototype:result];
}
- (LYCheckin*) defaultInstance {
  return [LYCheckin defaultInstance];
}
- (LYCheckin*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LYCheckin*) buildPartial {
  LYCheckin* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (LYCheckin_Builder*) mergeFrom:(LYCheckin*) other {
  if (other == [LYCheckin defaultInstance]) {
    return self;
  }
  if (other.hasDeviceModel) {
    [self setDeviceModel:other.deviceModel];
  }
  if (other.hasOsType) {
    [self setOsType:other.osType];
  }
  if (other.hasOsVersion) {
    [self setOsVersion:other.osVersion];
  }
  if (other.hasLyMajorRelease) {
    [self setLyMajorRelease:other.lyMajorRelease];
  }
  if (other.hasLyMinorRelease) {
    [self setLyMinorRelease:other.lyMinorRelease];
  }
  if (other.hasDownloadUrl) {
    [self setDownloadUrl:other.downloadUrl];
  }
  if (other.hasDesc) {
    [self setDesc:other.desc];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LYCheckin_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LYCheckin_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setDeviceModel:[input readString]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (LYOsTypeIsValidValue(value)) {
          [self setOsType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setOsVersion:[input readString]];
        break;
      }
      case 32: {
        [self setLyMajorRelease:[input readInt32]];
        break;
      }
      case 40: {
        [self setLyMinorRelease:[input readInt32]];
        break;
      }
      case 50: {
        [self setDownloadUrl:[input readString]];
        break;
      }
      case 58: {
        [self setDesc:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasDeviceModel {
  return result.hasDeviceModel;
}
- (NSString*) deviceModel {
  return result.deviceModel;
}
- (LYCheckin_Builder*) setDeviceModel:(NSString*) value {
  result.hasDeviceModel = YES;
  result.deviceModel = value;
  return self;
}
- (LYCheckin_Builder*) clearDeviceModel {
  result.hasDeviceModel = NO;
  result.deviceModel = @"";
  return self;
}
- (BOOL) hasOsType {
  return result.hasOsType;
}
- (LYOsType) osType {
  return result.osType;
}
- (LYCheckin_Builder*) setOsType:(LYOsType) value {
  result.hasOsType = YES;
  result.osType = value;
  return self;
}
- (LYCheckin_Builder*) clearOsType {
  result.hasOsType = NO;
  result.osType = LYOsTypeLyAndroid;
  return self;
}
- (BOOL) hasOsVersion {
  return result.hasOsVersion;
}
- (NSString*) osVersion {
  return result.osVersion;
}
- (LYCheckin_Builder*) setOsVersion:(NSString*) value {
  result.hasOsVersion = YES;
  result.osVersion = value;
  return self;
}
- (LYCheckin_Builder*) clearOsVersion {
  result.hasOsVersion = NO;
  result.osVersion = @"";
  return self;
}
- (BOOL) hasLyMajorRelease {
  return result.hasLyMajorRelease;
}
- (int32_t) lyMajorRelease {
  return result.lyMajorRelease;
}
- (LYCheckin_Builder*) setLyMajorRelease:(int32_t) value {
  result.hasLyMajorRelease = YES;
  result.lyMajorRelease = value;
  return self;
}
- (LYCheckin_Builder*) clearLyMajorRelease {
  result.hasLyMajorRelease = NO;
  result.lyMajorRelease = 0;
  return self;
}
- (BOOL) hasLyMinorRelease {
  return result.hasLyMinorRelease;
}
- (int32_t) lyMinorRelease {
  return result.lyMinorRelease;
}
- (LYCheckin_Builder*) setLyMinorRelease:(int32_t) value {
  result.hasLyMinorRelease = YES;
  result.lyMinorRelease = value;
  return self;
}
- (LYCheckin_Builder*) clearLyMinorRelease {
  result.hasLyMinorRelease = NO;
  result.lyMinorRelease = 0;
  return self;
}
- (BOOL) hasDownloadUrl {
  return result.hasDownloadUrl;
}
- (NSString*) downloadUrl {
  return result.downloadUrl;
}
- (LYCheckin_Builder*) setDownloadUrl:(NSString*) value {
  result.hasDownloadUrl = YES;
  result.downloadUrl = value;
  return self;
}
- (LYCheckin_Builder*) clearDownloadUrl {
  result.hasDownloadUrl = NO;
  result.downloadUrl = @"";
  return self;
}
- (BOOL) hasDesc {
  return result.hasDesc;
}
- (NSString*) desc {
  return result.desc;
}
- (LYCheckin_Builder*) setDesc:(NSString*) value {
  result.hasDesc = YES;
  result.desc = value;
  return self;
}
- (LYCheckin_Builder*) clearDesc {
  result.hasDesc = NO;
  result.desc = @"";
  return self;
}
@end

